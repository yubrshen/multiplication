#+TITLE: Multiplication Tables of Prime Numbers
#+AUTHOR: Yu Shen
#+EMAIL: yubrshen@gmail.com
#+LANGUAGE: en
#+STARTUP: align overview indent fold nodlcheck hidestars oddeven lognotestate
#+PROPERTY: mkdirp yes

* Introduction

This is the file of literate programming for the program of displaying multiplication table of first n primes. 

All artifacts required for making the program are deliberated, designed, developed, and documented in this file. 
Those required artifacts can be generated from this file. 

This file is also the design notes, and design documentation for the program. 
It can be converted to HTML through emacs org-mode, better readability.

For more detailed information about how this literate programming with org-mode/emacs works, please see the Appendix below. 

To compile the program, please read README section below, or read the generated said file. 

* Requirements

The following are the requirements:

Write a program that prints out a multiplication table of the first 10 prime
numbers.

The program must run from the command line and print one table to
STDOUT.

The first row and column of the table should have the 10 primes, with
each cell containing the product of the primes for the corresponding row and
column.

Notes

• Consider complexity. How fast does your code run? How does it scale?

• Consider cases where we want N primes.

• Do not use the Prime class from stdlib (write your own code).

• Write tests. Try to demonstrate TDD/BDD.

Below are the analysis of the requirements. 

** The user-story

Use Case: Basic

A user retrieves multiplication table of the first n prime numbers. 
- The user uses command line to retrieve
- The results should be displayed in STDOUT

- The number of the first prime numbers are 10

- The format should be a table with the first row and column of the table should have the 10 primes, with
each cell containing the product of the primes for the corresponding row and
column.

The columns should be aligned, and right justified. 

Use Case: Extended

Users might want to have multiplications of arbitrary number of prime numbers, 
while keeping the other modality of the use case as the same as the basic one, 
or as much as possible, when the usability and computation feasibility permit. 
 
User might want to have the multiplication table displayed on web page. 

** Non-user-visible requirements
1. Performance: 

The program should provide feedback soon enough to user to avoid the user's feeling doubt whether the program is working correctly. 

2. Scalability:

The response of the program should be still acceptable when the number of prime numbers increase. 
Or some interactive measure should be taken to update the user that progress are being properly made.  

* Architecture

The program can have the following parts:
- User interface providing the command line interface, displaying the outcome of the program, including, optionally, parsing the parameter of the number of prime numbers.
- Computation of prime numbers, their multiplications, proper format, and values for UI to displayed.

With the separation of computation from UI, it would be possible in the future to have different UI, such as web interface, or mobile interface. 
While the computation that is only related to the mathematical model would remain. 

* Design

** Top level entry function: -main

For the user interface, the function -main will implement the command

- It will drive computation to get the calculation results. 
- It will also call functions to format the results and do the side effect of displaying the results.

** Functions for computation

For the computation, there will be the following functions:

(primes n) 

produces the first n primes starting from the smallest, 2. It returns a lazy sequence to be efficient, and responsive. 
Care has been taken to reduce computation as much as possible. 

(multi n numbers) 

produces the multiplications of the first n numbers in numbers which may be a lazy-sequence, 
returns a map with key matrix and value of the computed multiplication table, in terms of sequence of sequences, as sequence of rows
and a key of max, with the maximum value in the matrix. 
The maximum value may be used to for the width of numbers for properly formatting the multiplication table. 
It also returns key of column-row, with value for the header for the columns, and row-header, with value for each row in the table. 

In order to reduce repeated computation of multiplications, a function to perform multiplication is transformed with memoize, in order to cache computation results.

** Functions for representation

For display on STDOUT, the following functions are designed. 

(table-str matrix-map) 

generates the formated string to be displayed for the matrix, based on the output of multi. 
It adds the column header, and row header, makes sure the columns are right-justified. 
 
** Overall integration

(multi-tab-primes n) 

Returns the string suitable to be displayed 
    for the multiplication table of the first n primes. 
    This is the highest level function with side effect. It can be called in main to display the multiplication table. 

** Test Driven Development (TDD)

Based on the above design, all functions are developed first with test case(s), which solidify the parameters, and return value, 
and typical case of input, and the expected output. 

Then the function is developed based on the specification, and test cases. 

The design is done to separate concerns of different nature, and properly abstracted, so that each function's specification, and test cases can be defined with 
little coupling with the other functions as much as possible. 

Especially, side effect is only limited to the function -main, so that all other function can be tested by values alone, taking advantage of persistence.

midje plug-in is used to implement automated continuous tests. 

As the example is rather simple, there is not much to demonstrate the emphasis on behavior driven development (BDD). 
The major user behavior is the use case of user requesting multiplication table of first n primes. The use case is supported by the function multi-tab-primes, in turns,
functions are defined and specified to support multi-tab-primes

** Further Improvement and Extension

- Arbitrary number of the first prime numbers. By parsing command line argument, it's possible to support arbitrary number of prime numbers.
- Provide multiplication table through other user interface, such as web. The design is layered, it's possible to change the representation mechanism to support 
    other user interface.
- The command line at the present is not user friendly. The command line is too long. The jar file may be installed in a directory on CLASSPATH 
    so that a user does need to specify the direcotry where the jar file located. 

** Algorithm of finding prime numbers

Iterate from existing seeds of primes, to generate the next prime number. The candidate is the largest prime seed plus 2, 4, ..., (sequence of even numbers). 
The candidacy is confirmed if the candidate cannot be divided by all the prime seeds.
(Actually, it's sufficient to check all the prime seeds, whose square is not greater than the candidate.)

** Performance optimization for function primse, and others

The complexity of generating the first n pri0me numbers may not be linear to the number n. 
It takes o(n) number of remainder operations, to tell if a number is a prime or not, 
but it's hard to tell the complexity to find the next prime number based on the current prime number seeds, 
as one has to explore the even number bigger than the existing prime numbers. 
It may not be a function of n at all. 
It depends on the distribution characteristics of the prime numbers. At the moment, I feel that it's beyond my knowledge and time to investigate 
the complexity of finding one new prime number. I'll just try to be as economical as possible. 

In the future, more might be done in controlling the space for prime candidates in additional to assuming it to be odd numbers larger than the current existing prime numebers. 

In order to reduce computation as much as possible, the following optimization considerations are taken:
- After 2, all prime numbers must be odd number, 
    so the candidates of the next prime number after existing number would be start from the largest prime number plus 2, to keep the candidates odd numbers.

- If a number is divisible by another number, it must be divisible by certain prime numbers. 
Such prime numbers should be smaller than the candidate under investigation.

- Furthermore, it's sufficient to check divisibility with smaller prime number p such that p*p should be less or equal to the candidate under investigation, 
    since, if a number x could be divided by prime number p larger than the square root of x, 
    then there would be another prime number q such that p*q*r = x, where r is another number. 
    In this case, q must be smaller than the square root of x, otherwise, p*q would be larger than x.  

All the rest of the computation or transformation is of lower complexity, o(n*n), where n is the number of prime numbers.

As a*b = b*a, the multiplication can be further reduced by about half by doing memoize the computation. 

The total elapse time of multi-tab-primes for 10 prime numbers is about 33 msecs, when running with 
    
java -jar multiplication-table-of-prime-0.1.0-SNAPSHOT-standalone.jar

However, when running with 

leni run

It takes about 13 msecs. The difference is yet to know. 

By looking at more detailed elapsed time:

#+BEGIN_SRC quote
"Elapsed time: 7.731669 msecs" ; (primes 10)
"Elapsed time: 2.605125 msecs" ; (multi, 
"Elapsed time: 21.287298 msecs" ; (table-str,
#+END_SRC
I'm surprised that it takes more than 21 msecs to do string format with table-str, more than that of (primes 10) to generate the first 10 prime numbers. 
It may change when further prime numbers becomes less dense. 

Overall, it seems the response time is acceptable for current requirements. 

It would be faster to combine multi and table-str to directly produce the string represenation of the multiplication table, save one round of traversing the matrix. 
But I feel that it's more coupled. This may be discussed further.  

* Project meta
** Project definition
#+BEGIN_SRC clojure :tangle project.clj
  (defproject multiplication-table-of-prime "0.1.0-SNAPSHOT"
    :description "This provides multiplication table of prime numbers"
    :url ""
    :license {:name "Eclipse Public License"
              :url "http://www.eclipse.org/legal/epl-v10.html"}
    :dependencies [[org.clojure/clojure "1.6.0"]]
    :main ^:skip-aot multiplication-table-of-prime.core
    :target-path "target/%s"
    :profiles {:uberjar {:aot :all}
               :dev {:dependencies [[midje "1.6.3"]]}})
#+END_SRC

** The README
#+BEGIN_SRC markdown :tangle README.md
  # multiplication-table-of-prime

  This programs provides multiplication table of prime numbers.

  ## Installation

  Place the jar file of multiplication-table-of-prime-0.1.0-SNAPSHOT-standalone.jar
  at a directory which is convenient to access for the user.

  ## Usage

  Execute the following at the command line:

      $ java -jar multiplication-table-of-prime-0.1.0-SNAPSHOT-standalone.jar

  Produces a multiplication table of the first 10 prime numbers of 2, 3, 5, 7, 9, ...
  a table of multiplications of the prime numbers will be displayed at STDOUT. 

  Assume that the current directory is where the jar file multiplication-table-of-prime-0.1.0-SNAPSHOT-standalone.jar resides.

  By default, the jar file

  multiplication-table-of-prime-0.1.0-SNAPSHOT-standalone.jar

  is at

      <project-root-directory>/target/uberjar

      <project-root-directory>

  is the place holder for the root directory of the project for multiplication table of prime numbers. 

  ## Produce the jar file for the program

  At the root directory of the Clojure project, execute the following at the command line:

      $ lein uberjar

  ## Literate programming

  This program is developed with "Literate Programming". The design, test specification, and development can be found at [Literate Programming Workbook](./design-test-implementation.org)
  all source code are generated from it, therefore 
  there is little comments in the source code. To review the code, design, etc., it's better read [Literate Programming Presentation](./design-test-implementation.html), which is more readable. 
#+END_SRC

* Source-code

** Preamble

#+BEGIN_SRC clojure :tangle test/multiplication_table_of_prime/core_test.clj
  (ns multiplication-table-of-prime.core-test
    (:require [midje.sweet :refer :all]
              [multiplication-table-of-prime.core :refer :all]
              ))
#+END_SRC

#+NAME: core
#+BEGIN_SRC clojure :tangle src/multiplication_table_of_prime/core.clj
  (ns multiplication-table-of-prime.core
  (:gen-class))
#+END_SRC

** primes

#+NAME:primes-test
#+BEGIN_SRC clojure :tangle test/multiplication_table_of_prime/core_test.clj
  (facts "about `primes'"
         (fact "First prime number"
               (primes 1) => [2])
         (fact "More prime numbers"
               (primes 3) => [2 3 5])
         (fact "First 10 prime numbers"
               (primes 10) => [2 3 5 7 11 13 17 19 23 29]))
 #+END_SRC
<<primes-test>>
#+NAME:primes
#+BEGIN_SRC clojure :tangle src/multiplication_table_of_prime/core.clj
  (defn primes
    "Produces the first n primes starting from the smallest, 2. It returns a lazy sequence."

    [n]
    (if (= n 1)
      [2]
      (nth 
       (iterate
        (fn [seeds]
          (conj seeds (first
                       (filter (fn [c] (every? (fn [p] (< 0 (mod c p))) (filter (fn [p] (<= (* p p) c)) seeds)))
                               (map (partial + (last seeds))
                                    (filter even? (drop 1 (range)))))))) [2 3])
       (- n 2))))
 #+END_SRC

<<primes>>

** multi

#+NAME:multi-test
#+BEGIN_SRC clojure :tangle test/multiplication_table_of_prime/core_test.clj
  (facts "about `multi'"
         (fact "Some multiplications"
               (multi 3 (range)) => {:matrix [[0 0 0]
                                      [0 1 2]
                                      [0 2 4]]
                                     :max 4
                                     :row-header [0 1 2]
                                     :column-header [0 1 2]}))
 #+END_SRC
<<multi-test>>
#+NAME:multi
#+BEGIN_SRC clojure :tangle src/multiplication_table_of_prime/core.clj
  (defn multi
    "Produces the multiplications of the first n numbers in numbers which may be a lazy-sequence, 
    returns a map with key matrix and value of the computed multiplication table, in terms of sequence of sequences, as sequence of rows
    and a key of max, with the maximum value in the matrix. 
    The maximum value may be used to for the width of numbers for properly formatting the multiplication table. 
    It also returns key of column-row, with value for the header for the columns, 
    and row-header, with value for each row in the table."

    [n numbers]
    (let [numbers-realized (take n numbers)
          *_remembered (memoize (fn [x y] (* x y)))
          matrix (for [x numbers-realized]
                   (for [y numbers-realized] (*_remembered x y)))
          max-value (#(*_remembered % %) (last numbers-realized))]
      {:matrix matrix :max max-value
       :row-header numbers-realized :column-header numbers-realized}))
 #+END_SRC

<<multi>>


** table-str
#+NAME:table-str-test
#+BEGIN_SRC clojure :tangle test/multiplication_table_of_prime/core_test.clj
  (facts "about `table-str'"
         (fact "matrix as a table as a string"
               (table-str {:matrix [[0 0 0]
                                        [0 1 2]
                                        [0 200 4]]
                           :max 200
                           :row-header [0 1 2]
                           :column-header [0 1 2]})
               => "       0   1   2\n   0   0   0   0\n   1   0   1   2\n   2   0 200   4")
   )
 #+END_SRC

<<table-str-test>>
#+NAME:table-str
#+BEGIN_SRC clojure :tangle src/multiplication_table_of_prime/core.clj
  (defn table-str 
    "generates the formated string to be displayed for the matrix, based on the output of multi. 
    It adds the column header, and row header, makes sure the columns are right-justified. "

    [{:keys [matrix max row-header column-header]}]
    (let [width (count (str max))]
      (let [number-str #(format (str " %" width "d") %)
            row-header-width (count (number-str (first row-header)))]
        (str
         (apply str (concat (repeat row-header-width " ") (map number-str column-header))) "\n"
         (clojure.string/join "\n"
                              (for [i (range (count matrix))]
                                (str (number-str (nth row-header i))
                                     (apply str (for [x (nth matrix i)] (number-str x))))))))))
 #+END_SRC

<<table-str>>

** multi-tab-primes


#+NAME:multi-tab-primes-test
#+BEGIN_SRC clojure :tangle test/multiplication_table_of_prime/core_test.clj
  (facts "about `multi-tab-primes'"
         (fact "multiplication table for the first 3 prime numbers"
               (multi-tab-primes 3) =>
               "     2  3  5\n  2  4  6 10\n  3  6  9 15\n  5 10 15 25")
   )
 #+END_SRC
<<multi-tab-primes-test>>
#+NAME:multi-tab-primes
#+BEGIN_SRC clojure :tangle src/multiplication_table_of_prime/core.clj
  (defn multi-tab-primes
    "Returns the string suitable to be displayed 
    for the multiplication table of the first n primes."

    [n]
    (let [prime-nbrs (time (primes n))
          mat (time (multi n prime-nbrs))
          s (time (table-str mat))]
      s
      ;; (->> prime-nbrs
      ;;      (multi n,)
      ;;      table-str)
      )
    )
 #+END_SRC

<<multi-tab-primes>>

** main
#+NAME:main
#+BEGIN_SRC clojure :tangle src/multiplication_table_of_prime/core.clj
  (defn -main
    "Calculate and display multiplication table of the first 10 prime numbers."

    [& args]
    ;; Check the response time of generating the multiplication table.
    ;; (println (time (multi-tab-primes 10)))
    (println (multi-tab-primes 10))
    )

#+END_SRC

* Appendix

This file is for literate programming. It's adapted from Kai Wu's "Clojure Default/Project Skeleton, Using Org Literate Programming"

The following excepted from his introduction.

** Meta: this file, Clojure + Org → LP, etc.
You're looking at a literate programming (LP) file, specifically an
[[http://orgmode.org][Org mode]] formatted file combining both documentation (Org's structured
markup) and code blocks (Clojure code).

For best results please *use Emacs 24.3 or later to view this* =.org=
*file*. If you're looking at this on Github.com, STOP - the rendering
there is neither complete nor correct!

*** The *benefits* of LP using Emacs + Org
1. Docs matter, a lot. With LP, documentation is integral to
   development, never an afterthought.
   - For all but small throwaway systems, you're likely keeping a
     separate file of development notes already; LP would integrate
     that.
2. With one LP file, avoid the incidental/inessential complexity of
   the filesystem: avoid context-switch overhead moving between files,
   and sidestep your language's imposed filesystem structure.
3. Org rocks for prose:
   - Org's plain-text *markup is lightweight*, yet more powerful than
     Markdown, and cleaner than rST.
   - The *structural editing* provided by Org documents lets you
     organize your thoughts/writing/code very quickly.  With good
     structure even major revisions are easy.
   - Org's exporter lets your *write-once, express-many-times*: you
     can export an Org file to HTML (e.g. for blogging) or LaTeX
     (for serious publishing).
   - It's easy to version-control Org files.
4. Org rocks for code:
   - Each code block has flexible granularity: can be named and
     referred to; evaluated or not; have data sent in or exported;
     specify different REPL sessions; specify different target/tangled
     files.
   - Code blocks are syntax-highlighted.
   - Code blocks are ready to edit: jump to major-mode editing easily.
   - A single Org file can mix different languages.
5. Meta-development, manage complexity from a coherent perspective: a
   unified, single-file approach encourages holistic software
   development and exposition, in a natural order, using structure to
   enhance understanding.  LP is not just documentation and code
   together: it's a *process and abstraction unifying the development
   lifecycle*: requirements, architecture, design, code, tests,
   deployment, and maintenance - can all be bound coherently in one
   active format.


** Using this file
*** Prerequisites
1. A recent version of Emacs, 24.3+.
2. Both org-mode (included w/ Emacs 24) and =clojure-mode= installed;
   use Emacs ELPA as needed.
   - Consider using an Emacs "starter package" that provides a good
     baseline, like [[http://batsov.com/prelude/][Emacs Prelude]] or [[http://overtone.github.io/emacs-live/][Emacs Live]].

Then if you start Emacs and load this file, you'll see it the way it's
meant to be seen: as a multi-level, hierarchically organized and
structured literate code file, w/ syntax-highlighted code blocks.  

*** Weaving and tangling
To use the original Knuth terminology, this single file can be /woven/
into documentation, or /tangled/ to code.

**** Weave/export, to documentation
+ To /weave/: the Org equivalent of /weaving/ is to export this file,
  typically to HTML or LaTeX/PDF. The keystroke is =C-c-e= i.e. hold
  down the Control key while pressing "c" then "e" to view the export
  options.
  - e.g. export this file to HTML with =CTRL-c-e h= or, to see it
    immediately in a browser window, =CTRL-c-e b=.
+ You don't have to export this file though; if/when you're comfy in
  Emacs, the Org format itself is great.

**** Tangle, to code
+ To /tangle/: in Org, it's the same word/term. =C-c-v-t= will cause
  all designated code blocks in this file to appear in the filesystem.
  Here, the code blocks go to files and directories matching a new
  Clojure app, as would be produced by =lein new app
  the-project-name=.

*** Other coolness
- =SHIFT-TAB= will *cycle* the display: top-level headings only, all
  headings, or fully-expanded.
- Within a code block, =CTRL-c= ='= will open a buffer to edit the
  code. For full power, be sure =clojure-mode=, =paredit=, and
  =nrepl= are installed.
- Org docs: see [[http://orgmode.org/org.html][main documentation]], especially sections on [[http://orgmode.org/org.html#Document-Structure][structure]],
  [[http://orgmode.org/org.html#Hyperlinks][links]], [[http://orgmode.org/org.html#Markup][markup]], and [[http://orgmode.org/org.html#Working-With-Source-Code][literate programming]] features.


